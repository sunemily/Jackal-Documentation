Short notes based on tutorials found at wiki.ros.org/ROS/Tutorials

-----------------------------------------------------------
ROS Tools:
- rospack <find/depends1/..>
- roscd
- rosls
- rosed <package> <filename>

- rosnode <list/info/ping/..>
- rosrun <package> <node> [--name:=turtle]
- rostopic <-h/bw/echo/hz/list/pub/type>
- rosmsg show

- rosservice <list/call/type/find/uri>
- rosparam <set/get/load/dump/delete/list>

- roslaunch <package> <filename.launch>
-----------------------------------------------------------

Package Stuff: /<your-workspace>/src/<package>
- catkin_create_pkg <package_name> [depend1] [depend2] [depend3]
- catkin_make builds ALL packages in the workspace.
- Need to source devel/setup.bash to add to ROS environment
- package.xml has license, maintainer, and dependency info

ROS:
- Nodes, Messages, Topics. 
- Use rqt_graph to visualize everything that's going on
- Use rqt_console to log and view all debugging messages
- Use rqt_logger_levels to filter data being sent to rqt_console

Nodes:
- Executable within a package
- Publish/subscribe to topics, provide/use services
- Python (rospy) or C++ (roscpp)

Topics:
- Class of messages, has a type
- Can publish, view, check type from the command line
- Use rqt_plot to plot data published on a topic

Services:
- Kind of like a request? Can get responses
- Directed communication

Parameters:
- Adjustable node settings

ROS Launch:
- Starts multiple nodes at once
- As defined in *.launch in /launch in the package folder
- Looks like XML, begins and ends with launch tags

Message and Service Files:
- Stored in /msg or /srv directories within a package
- msg: one field type and field name per line. eg:
    Header header
    string child_frame_id
    geometry_msgs/PoseWithCovariance pose
    geometry_msgs/TwistWithCovariance twist
- srv: msg (request) \n --- \n msg (response). Both in the same file, separate by a ---
    int64 A
    int64 B
    ---
    int64 sum
- To build msg and src files: 
  - message_generation and message_runtime as build and runtime dependencies in package.xml
  - message_generation to the list of COMPONENTS in CMakeLists.txt
  - message_runtime to CATKIN_DEPENDS in CMakeLists.txt
  - Uncomment and edit generate_messages(), add_message_files() and add_service_files() in CMakeLists.txt
  - catkin_make install

URDF Files:
- Source: http://wiki.ros.org/urdf/Tutorials
- Tree structure with one root link (part) called "base_link"
- All parts of the robot are connected heirarchically to the root through a set of joints => automatically
  converted to TF publishers.
- <link>:
    <visual>
      <geometry> -- box/sphere/cylindrical/mesh (3D model)
      <material> -- color
      <origin>
    <collision>
      <geometry> -- (make this simpler than the visual mesh)
      <origin>
    <inertial>
      <mass>
      <inertia matrix>
- <joint> -- type (fixed, prismatic, revolute, continuous, planar, floating)
    <parent link>
    <child link>
    <origin>
- Xacro: provides macros, constants etc. to simplify robot description
  - <xacro:property name="" value="" /> -- specify named constants
  - ${abc} -- refer to constants, can do simple math (+-/*) too
  - <xacro:macro name="" params=""> ... </xacro:macro> -- parametrize link/joint

  URDF in Gazebo:
  - Can add <gazebo> elements to links, joints and robots
  - <gazebo reference="name"> ... </gazebo>
  
  Creating own World in Gazebo:
  - http://wiki.ros.org/cob_gazebo_worlds/Tutorials/Create%20your%20own%20world
  - Model own world/obstacles/objects in Google Sketchup. 
    This creates a .dae file, which are the visual models that make up your world. 
  - Save all media files in <folder name>/Media/models/<object>.dae
  - World file will be saived inside <folder name>/world/<worldname>.world
  - The .dae files will be called in the world file
  - The launch file inside <folder name>/launch calls the world file upon Gazebo startup

